# yamllint disable
# License: MIT (c) GitLab Inc.
# yamllint enable
---
rules:
  - id: java_inject_rule-CommandInjection
    languages:
      - java
    mode: taint
    pattern-sources:
      - pattern: (javax.servlet.http.HttpServletRequest $R).$METHOD(...)
      - pattern: (java.util.Scanner $S).$METHOD(...)
      - pattern: (java.util.stream.Stream).$METHOD(...)
      - pattern: (java.util.StringJoiner $SJ).toString(...)
      - pattern: (java.sql.ResultSet.getString $R).$METHOD(...)
      - pattern: (java.lang.System $S).getProperty(...)
      - pattern: (java.lang.System $S).getenv(...)
      - pattern: (java.lang.StringBuilder $SB).toString(...)
      - pattern: (java.io.FileInputStream $F).read(...)
      - pattern: (java.io.FileReader $F).read(...)
      - pattern: (java.net.Socket $S).getInputStream(...)
      - pattern: (java.net.Socket $S).getOutputStream(...)
      - pattern: (java.net.DatagramSocket $S).receive(...)
      - pattern: (java.net.DatagramSocket $S).getInputStream(...)
      - pattern: java.nio.file.Files.readAllBytes(...)
      - pattern: java.nio.file.Files.readAllLines(...)
      - pattern: java.nio.file.Files.lines(...)
      - pattern: java.nio.file.Files.newBufferedReader(...)
      - pattern: org.apache.commons.io.IOUtils.toString(...)
      - pattern: org.apache.commons.io.IOUtils.readLines(...)
      - pattern: org.apache.commons.io.IOUtils.toByteArray(...)
      - pattern: (com.fasterxml.jackson.databind.ObjectMapper $OM).readValue(...)
      - pattern: (com.fasterxml.jackson.databind.ObjectMapper $OM).treeToValue(...)
      - pattern: $CLASS.$METHOD(..., (javax.servlet.http.HttpServletRequest $R), ...)
      - pattern: $FUNC(..., (javax.servlet.http.HttpServletRequest $R), ...)
      - patterns:
          - pattern-inside:
              $FUNC(..., String $X, ...) { ... }
          - focus-metavariable: $X
    pattern-propagators:
      - pattern: $LIST.add($X)
        from: $X
        to: $LIST
      - pattern: $MAP.put(..., $X)
        from: $X
        to: $MAP
      - pattern: $STR.concat($X)
        from: $X
        to: $STR
      - pattern: $STR = String.format(..., $X, ...)
        from: $X
        to: $STR
      - pattern: $STR = String.join(..., $X, ...)
        from: $X
        to: $STR
    pattern-sinks:
      - pattern: (ProcessBuilder $PB).command(...)
      - pattern: new ProcessBuilder(...)
      - pattern: (Runtime $R).exec(...)
    message: |
      OS command injection is a critical vulnerability that can lead to a full system
      compromise as it may allow an adversary to pass in arbitrary commands or arguments
      to be executed.

      User input should never be used in constructing commands or command arguments
      to functions which execute OS commands. This includes filenames supplied by
      user uploads or downloads.

      Ensure your application does not:

      - Use user-supplied information in the process name to execute.
      - Use user-supplied information in an OS command execution function which does
      not escape shell meta-characters.
      - Use user-supplied information in arguments to OS commands.

      The application should have a hardcoded set of arguments that are to be passed
      to OS commands. If filenames are being passed to these functions, it is
      recommended that a hash of the filename be used instead, or some other unique
      identifier. It is strongly recommended that a native library that implements
      the same functionality be used instead of using OS system commands, due to the
      risk of unknown attacks against third party commands.

      When specifying the OS command, ensure the application uses the full path
      information, otherwise the OS may attempt to look up which process to execute
      and could be vulnerable to untrusted search path vulnerabilities (CWE-426).

      Example of safely executing an OS command:
      ```
      public static void executeCommand(String userFileData) throws java.io.IOException {
          // Generate a random filename, do not use user input
          String fileName = UUID.randomUUID().toString();
          // Create a Buffered/FileWriter
          BufferedWriter writer = new BufferedWriter(new FileWriter(fileName));
          // Write the user content to our random file
          writer.write(userFileData);
          // Close the file to flush contents
          writer.close();
          // Create the process builder with a hardcoded path to the binary, and our randomly
      generated filename
          ProcessBuilder processBuilder = new ProcessBuilder("/opt/app/path", fileName);
          // Start the process
          Process process = processBuilder.start();
          // Handle/redirect output of process here
          // ...
      }
      ```

      For more information on OS command injection, see OWASP's guide:
      https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html
    severity: "WARNING"
    metadata:
      shortDescription: "Improper neutralization of special elements used in an OS command
        ('OS Command Injection')"
      category: "security"
      cwe: "CWE-78"
      owasp:
        - "A1:2017-Injection"
        - "A03:2021-Injection"
      technology:
        - "java"
      security-severity: "High"
