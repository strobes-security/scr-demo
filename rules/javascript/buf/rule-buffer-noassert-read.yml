# yamllint disable
# License: MIT (c) GitLab Inc.
# yamllint enable
---
rules:
- id: javascript_buf_rule-buffer-noassert-read
  patterns:
  - pattern: "$OBJ.$METHOD(..., true)"
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(readUInt8|readUInt16LE|readUInt16BE|readUInt32LE|readUInt32BE|readUInt32BE|readInt8|readInt16LE|readInt16BE|readInt32LE|readInt32BE|readFloatLE|readFloatBE|readDoubleLE|readDoubleBE)$
  severity: "WARNING"
  languages:
  - "javascript"
  metadata:    
    owasp: 
    - "A6:2017-Security Misconfiguration"
    - "A05:2021-Security Misconfiguration"
    cwe: "CWE-125"
    shortDescription: "Out-of-bounds read"
    security-severity: "MEDIUM"
    category: "security"
    source-rule-url: "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-buffer-noassert.js"
  message: |
    The application is using Buffer API methods with the `noAssert` 
    parameter set to `true` for the read buffer methods. This disables 
    the bounds checking and could result in reading beyond the end of 
    the buffer, leading to potential memory corruption and security 
    vulnerabilities. When `noAssert` is set to `true`, the methods 
    do not perform bounds checking, allowing the offset to be beyond 
    the end of the buffer. This can lead to out-of-bounds memory access, 
    causing undefined behavior, crashes, or potential security exploits.

    To mitigate the issue, ensure that the `noAssert` parameter is not 
    set to `true`. Always use bounds checking to prevent out-of-bounds 
    memory access. Validate the offset before performing read operations 
    on the buffer.

    Secure Code Example:
    ```
      const buffer = Buffer.alloc(10); // Allocate a buffer of 10 bytes

      function safeBufferMethods(buf) {
        const safeOffset = 5; // An offset within the bounds of the buffer

        // Secure read methods
        if (safeOffset < buf.length) {
          buf.readUInt8(safeOffset);
          buf.readUInt16LE(safeOffset);
          buf.readUInt16BE(safeOffset);
          buf.readUInt32LE(safeOffset);
          buf.readUInt32BE(safeOffset);
          buf.readInt8(safeOffset);
          buf.readInt16LE(safeOffset);
          buf.readInt16BE(safeOffset);
          buf.readInt32LE(safeOffset);
          buf.readInt32BE(safeOffset);
          buf.readFloatLE(safeOffset);
          buf.readFloatBE(safeOffset);
          buf.readDoubleLE(safeOffset);
          buf.readDoubleBE(safeOffset);
        }
      }
      try {
        safeBufferMethods(buffer);
      } catch (error) {
        console.error('Caught an error:', error);
      }
    ```
