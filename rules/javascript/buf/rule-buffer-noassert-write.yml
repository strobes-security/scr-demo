# yamllint disable
# License: MIT (c) GitLab Inc.
# yamllint enable
---
rules:
- id: javascript_buf_rule-buffer-noassert-write
  patterns:
  - pattern: "$OBJ.$METHOD(..., true)"
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(writeUInt8|writeUInt16LE|writeUInt16BE|writeUInt32LE|writeUInt32BE|writeInt8|writeInt16LE|writeInt16BE|writeInt32LE|writeInt32BE|writeFloatLE|writeFloatBE|writeDoubleLE|writeDoubleBE)$
  severity: "WARNING"
  languages:
  - "javascript"
  metadata: 
    owasp: 
    - "A6:2017-Security Misconfiguration"
    - "A05:2021-Security Misconfiguration"
    cwe: "CWE-787"
    shortDescription: "Out-of-bounds write"
    security-severity: "MEDIUM"
    category: "security"
    source-rule-url: "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-buffer-noassert.js"
  message: |
    The application is using Buffer API methods with the `noAssert` 
    parameter set to `true` for the write buffer methods. This disables 
    the bounds checking and could result in writing beyond the end of 
    the buffer, leading to potential memory corruption and security 
    vulnerabilities. When `noAssert` is set to `true`, the methods 
    do not perform bounds checking, allowing the offset to be beyond 
    the end of the buffer. This can lead to out-of-bounds memory access, 
    causing undefined behavior, crashes, or potential security exploits.

    To mitigate the issue, ensure that the `noAssert` parameter is not 
    set to `true`. Always use bounds checking to prevent out-of-bounds 
    memory access. Validate the offset before performing write operations 
    on the buffer.

    Secure Code Example:
    ```
      const buffer = Buffer.alloc(10); // Allocate a buffer of 10 bytes

      function safeBufferMethods(buf) {
        const safeOffset = 5; // An offset within the bounds of the buffer

        // Secure write methods
        if (safeOffset < buf.length) {
          buf.writeUInt8(0, safeOffset);
          buf.writeUInt16LE(0, safeOffset);
          buf.writeUInt16BE(0, safeOffset);
          buf.writeUInt32LE(0, safeOffset);
          buf.writeUInt32BE(0, safeOffset);
          buf.writeInt8(0, safeOffset);
          buf.writeInt16LE(0, safeOffset);
          buf.writeInt16BE(0, safeOffset);
          buf.writeInt32LE(0, safeOffset);
          buf.writeInt32BE(0, safeOffset);
          buf.writeFloatLE(0, safeOffset);
          buf.writeFloatBE(0, safeOffset);
          buf.writeDoubleLE(0, safeOffset);
          buf.writeDoubleBE(0, safeOffset);
        }
      }

      try {
        safeBufferMethods(buffer);
      } catch (error) {
        console.error('Caught an error:', error);
      }
    ```
